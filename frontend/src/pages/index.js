import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import "@rainbow-me/rainbowkit/styles.css";
import { ConnectButton } from "@rainbow-me/rainbowkit";
import { Web3Storage } from "web3.storage";
import { useState, useEffect } from "react";
import { contractABI, contractAddress } from "./Constants";
import { useAccount, useContract, useSigner } from "wagmi";
import { computeAddress } from "ethers/lib/utils.js";

const inter = Inter({ subsets: ["latin"] });

const client = new Web3Storage({
  token:"<YOUR-TOKEN-ID>"
});

export default function Home() {
  const [files, setFiles] = useState(null);
  const [file, setFile] = useState(null);
  const [fileName, setFileName] = useState(null);
  const [fileSize, setFileSize] = useState(null);
  const [fileType, setFileType] = useState(null);

  const { address } = useAccount();
  const { data: signer } = useSigner();
  const contract = useContract({
    address: contractAddress,
    abi: contractABI,
    signerOrProvider: signer,
  });

  console.log("Contract: ", contract);

  const captureFile = async (e) => {
    try {
      setFile(e.target.files);
      setFileName(e.target.files[0].name);
      setFileSize(e.target.files[0].size);
      setFileType(e.target.files[0].type);
    } catch (err) {
      console.log(err);
    }
  };

  const uploadFile = async (e) => {
    e.preventDefault();
    console.log("UPLOADINGGG");
    if (file) {
      try {
        const uploadedFile = await client.put(file, {
          name: fileName,
          maxRetries: 3,
          wrapWithDirectory: false,
        });
        console.log(uploadedFile);
        const uploadTxn = await contract.uploadFile(
          uploadedFile?.toString(),
          fileSize?.toString(),
          fileType?.toString(),
          fileName?.toString()
        );
        console.log(uploadTxn);
        contract.on(
          "FileUploaded",
          (
            fileId,
            fileHash,
            fileSize,
            fileType,
            fileName,
            uploadTime,
            uploader
          ) => {
            alert(
              `Hey there! your file has been uploaded and you can take a look at it over here: https://ipfs.io/ipfs/${fileHash}`
            );
            const file_obj = {
              id: fileId?.toString() ?? fileId,
              hash: fileHash,
              size: fileSize?.toString() ?? fileSize,
              type: fileType,
              name: fileName,
              uploadTime: uploadTime?.toString() ?? uploadTime,
            };
            setFiles((prev) => [...prev, file_obj]);
          }
        );
        // const uploadTx = await contrr
      } catch (err) {
        console.log(err);
      }
    } else {
      console.log("NO FILE FOUND!");
    }
  };

  const getFilesUploaded = async () => {
    try {
      const fileCount = await contract.fileCount();
      console.log(fileCount?.toString());
      let filesArr = [];
      for (let i = 0; i < +fileCount.toString(); i++) {
        const file = await contract.files(address, i);
        const file_obj = {
          id: file[0]?.toString(),
          hash: file[1],
          size: file[2]?.toString(),
          type: file[3],
          name: file[4],
          uploadTime: file[5]?.toString(),
        };
        filesArr.push(file_obj);
      }
      console.log(filesArr);
      setFiles(filesArr);
    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => {
    if (contract) {
      getFilesUploaded();
    }
  }, [contract]);

  return (
    <>
      <Head>
        <title>Decentralized Storage App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.png" />
      </Head>

      <main>
        <div className="  bg-black text-white min-h-screen">
          <div className="flex items-center justify-between px-4 py-2">
            <h1 className="text-4xl font-extrabold ">
              Decentralized File Storage
            </h1>
            <ConnectButton />
          </div>
          <hr className="h-px my-8 bg-gray-200 border-0 dark:bg-gray-700"/>

          <div className="flex items-center justify-center ">
            {/* FORM */}
            <form
              onSubmit={(e) => uploadFile(e)}
              className="px-16 flex items-center justify-center mt-32"
            >
            <h1 className="text-3xl font-bold mx-2">Upload files:</h1>
              <label
                className="block mb-4 text-sm font-medium text-gray-900 dark:text-white"
                htmlFor="file_input"
              >
              </label>
              <input
                className="w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 hidden"
                // id="file_input"
                type="file"
                id="filecap"
                onChange={(e) => captureFile(e)}
              />
              <label
                htmlFor="filecap"
                className="cursor-pointer bg-white hover:bg-blue-500 text-blue-700 hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded dark:bg-gray-700 dark:text-gray-100 dark:border-gray-900 transform transition hover:scale-110"
              >
                {fileName ? fileName : "Choose a file ðŸ—¿"}
              </label>
              <button
                className="text-white bg-yellow-700 hover:bg-yellow-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm p-2 m-2 dark:bg-yellow-600 dark:hover:bg-yellow-700 focus:outline-none dark:focus:ring-blue-800"
                type="submit"
              >
                Upload
              </button>
            </form>
          </div>

          {/* TABLE */}
          <div className="flex flex-col px-6 py-8">
            <h1 className="text-3xl font-bold pt-64 pb-4">See Uploaded files:</h1>
            <div className="-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
              <div className="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8">
                <div className="shadow overflow-hidden border-b border-gray-200 sm:rounded-lg dark:border-black">
                  <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-800">
                    <thead className="bg-gray-50 dark:bg-blue-opaque">
                      <tr className="border-b dark:border-gray-600">
                        <th
                          scope="col"
                          className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                        >
                          id
                        </th>
                        <th
                          scope="col"
                          className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                        >
                          name
                        </th>
                        <th
                          scope="col"
                          className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                        >
                          type
                        </th>
                        <th
                          scope="col"
                          className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                        >
                          size
                        </th>
                        <th
                          scope="col"
                          className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                        >
                          date
                        </th>
                        <th
                          scope="col"
                          className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                        >
                          hash/view/get
                        </th>
                      </tr>
                    </thead>
                    {files?.length > 0 &&
                      files.map((file, key) => (
                        <tbody
                          className="bg-white dark:bg-blue-opaque divide-y divide-gray-200"
                          key={key}
                        >
                          <tr>
                            <td className="px-4 py-4 whitespace-nowrap">
                              <div className="flex items-center">
                                <div className="text-sm font-medium text-gray-900 ">
                                  {file.id}
                                </div>
                              </div>
                            </td>
                            <td className="px-4 py-4 whitespace-nowrap">
                              <div className="text-sm text-gray-900 ">
                                {file.name}
                              </div>
                            </td>
                            <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">
                              {file.type}
                            </td>
                            <td className="px-4 py-4 whitespace-nowrap">
                              <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800 dark:bg-pink-100 dark:text-pink-800">
                                {file.size}
                              </span>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {file.uploadTime}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-left text-sm font-medium">
                              <a
                                href={"https://ipfs.io/ipfs/" + file.hash}
                                className="text-indigo-600 hover:text-indigo-900 dark:text-purple-400 dark:hover:text-purple-700"
                                rel="noopener noreferrer"
                                target="_blank"
                              >
                                {file.hash.substring(0, 15)}...
                              </a>
                            </td>
                          </tr>
                        </tbody>
                      ))}
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}

//<button type="button" class="">Default</button>
